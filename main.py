from kappacrypt import FileCryptor
from kappacrypt.keys import RSAKeys
import os

def file_encrypt():
    try:
        print('------------------------------------')
        print("--请把以下文件放在与此程序同一路径下并改名--")
        print("---------1.要加密的文件:file----------")
        print("---2.接收者的公钥文件:public_key.der---")
        print('------------------------------------')
        input("----------确认后，回车继续-------------")
        if not os.path.exists('file'):
            print('------------------------------------')
            print("-------------请检查文件！-------------")
            print('-------------按回车键退出--------------')
            print('------------------------------------')
            input()
            exit(1)
        if not os.path.exists('public_key.der'):
            print('------------------------------------')
            print("-------------请检查密钥！-------------")
            print('-------------按回车键退出--------------')
            print('------------------------------------')
            input()
            exit(1)
        fc = FileCryptor("file")
        rsa = RSAKeys()
        rsa.load(
            {"public_key": "public_key.der"}
        )
        fc.encrypt(rsa.public_key)
        print('------------------------------------')
        print("--------------加密成功！---------------")
        print("-------输出文件为：file.encrypted------")
        print('-------------按回车键退出--------------')
        print('------------------------------------')
        input()
        exit(0)
    except Exception as e:
        print('------------------------------------')
        print('-------------error!-----------------')
        print('------------------------------------')
        print(e)


def file_decrypt():
    try:
        print('------------------------------------')
        print("--请把以下文件放在与此程序同一路径下并改名--")
        print("-----1.要解密的文件:file.encrypted------")
        print("---2.接收者的私钥文件:private_key.der---")
        print('------------------------------------')
        input("----------确认后，回车继续-------------")
        if not os.path.exists('file.encrypted'):
            print('------------------------------------')
            print("-------------请检查文件！-------------")
            print('-------------按回车键退出--------------')
            print('------------------------------------')
            input()
            exit(1)
        if not os.path.exists('private_key.der'):
            print('------------------------------------')
            print("-------------请检查密钥！-------------")
            print('-------------按回车键退出--------------')
            print('------------------------------------')
            input()
            exit(1)
        fc = FileCryptor("file.encrypted")
        rsa = RSAKeys()
        rsa.load(
            {"private_key": "private_key.der"}
        )
        fc.decrypt(rsa.private_key)
        print('------------------------------------')
        print("--------------解密成功！---------------")
        print("-----------输出文件为：file------------")
        print('-------------按回车键退出--------------')
        print('------------------------------------')
        input()
        exit(0)
    except Exception as e:
        print('------------------------------------')
        print('-------------error!-----------------')
        print('------------------------------------')
        print(e)


def genrate_key():
    try:
        rsa = RSAKeys()
        rsa.gen_keys()
        rsa.dump() # keys will be dumped to current directory
        print('------------------------------------')
        print("------------产生密钥对成功！-----------")
        print("------输出私钥为：private_key.der------")
        print("-------输出公钥为：public_key.der------")
        print('------------请妥善保管私钥-------------')
        print('-----------切勿泄漏给任何人-------------')
        print('-------------按回车键退出--------------')
        print('------------------------------------')
        input()
        exit(0)
    except Exception as e:
        print('------------------------------------')
        print('-------------error!-----------------')
        print('------------------------------------')
        print(e)
def readme():
    print('------------------------------------')
    print('----------欢迎使用文件加/解密----------')
    print('------------------------------------')
    print('-----本脚本使用4096字节rsa非对称加密-----')
    print('------------配合aes加密---------------')
    print('-------简而言之，公钥加密，私钥解密--------')
    print('------------请妥善保管私钥-------------')
    print('-----------切勿泄漏给任何人-------------')
    print('------------------------------------')
    print('-------------按任意键退出--------------')
    input()
    exit(0)
if __name__ == '__main__':
    print('------------------------------------')
    print('----------欢迎使用文件加/解密----------')
    print('----------------xa------------------')
    print('------------2021.10.01--------------')
    print("--这是一个加解密文件程序，请按照提示输入！--")
    print("-------0------请选择功能：-------------")
    print("---------1.加密文件 2.解密文件 --------")
    print('---------3.生成密钥对 4.查看说明--------')
    print('------------------------------------')
    select = input()
    if select == "1":
        file_encrypt()
    elif select == "2":
        file_decrypt()
    elif select == "3":
        genrate_key()
    elif select == "4":
        readme()
    else:
        print('------------------------------------')
        print('---------无效输入！正在退出！-----------')
        print('------------------------------------')
        input()
        exit(1)
